read.table(../meta/maizteocintle_SNP50k_meta_extended.txt)
data<- read.table(file= "../meta/maizteocintle_SNP50k_meta_extended.txt")
data<- read.table(file = "../meta/maizteocintle_SNP50k_meta_extended.txt")
getwd
getwd()
getwd()
getwd()
getwd()
getwd()
data<- read.table(file = "./Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Tarea_1.3/PracUni1Ses3/maices/meta/maizteocintle_SNP50k_meta_extended.txt")
getwd()
ruta.data<- "./Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Tarea_1.3/PracUni1Ses3/maices/meta/maizteocintle_SNP50k_meta_extended.txt")
ruta.data<- "./Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Tarea_1.3/PracUni1Ses3/maices/meta/maizteocintle_SNP50k_meta_extended.txt"
meta_maiz <- read.table(ruta_archivo, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
ruta.data<- "Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Tarea_1.3/PracUni1Ses3/maices/meta/maizteocintle_SNP50k_meta_extended.txt"
meta_maiz <- read.table(ruta_archivo, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
meta_maiz <- read.table(ruta.data, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
getwd()
print(meta_maiz)
#primeras 6 filas
head(meta_maiz, 6)
#primeras 6 filas
head(meta_maiz, 6)
View(meta_maiz)
View(meta_maiz)
#cantidad de muestras
nrow(meta_maiz)
length(unique(meta_maiz$estado))
n_estados <- length(unique(meta_maiz$estado))
cat("Número de estados distintos:", n_estados, "\n")
View(meta_maiz)
View(meta_maiz)
length(unique(meta_maiz$Estado))
n_estados <- length(unique(meta_maiz$estado))
cat("Número de estados distintos:", n_estados, "\n")
length(unique(meta_maiz$Estado))
#muestras recolectadas antes de 1980
sum(meta_maiz$A.o._de_colecta < 1980)
n_antes_1980 <- sum(meta_maiz$anio < 1980)
cat("Número de muestras recolectadas antes de 1980:", n_antes_1980, "\n")
#muestras recolectadas antes de 1980
sum(meta_maiz$A.o._de_colecta < 1980)
#muestras recolectadas antes de 1980
sum(meta_maiz$A.o._de_colecta< 1980)
(meta_maiz)
View(meta_maiz)
View(meta_maiz)
#muestras recolectadas antes de 1980
sum(meta_maiz$A.o._de_colecta< 1980)
n_antes_1980 <- sum(meta_maiz$A.o._de_colecta < 1980)
cat("Número de muestras recolectadas antes de 1980:", n_antes_1980, "\n")
colnames(meta_maiz)
#muestras recolectadas antes de 1980
sum(meta_maiz[["A.o._de_colecta"]] < 1980)
#muestras recolectadas antes de 1980
sum(meta_maiz[["A.o._de_colecta"]] < 1980,  na.rm = TRUE)
#muestras recolectadas antes de 1980
sum(meta_maiz[["A.o._de_colecta"]] < 1980,  na.rm = TRUE)
n_antes_1980 <- sum(meta_maiz$A.o._de_colecta < 1980)
cat("Número de muestras recolectadas antes de 1980:", n_antes_1980, "\n")
#conteo de razas
table(meta_maiz$Raza)
conteo_razas <- table(meta_maiz$Raza)
print(conteo_razas)
#promedio de altura recolectadas
mean(meta_maiz$altitud, na.rm = TRUE)
#promedio de altura recolectadas
mean(meta_maiz$Altitud, na.rm = TRUE)
#maxima y minima actitud
max_altitud <- max(meta_maiz$Altitud, na.rm = TRUE)
min_altitud <- min(meta_maiz$Altitud, na.rm = TRUE)
#maxima y minima actitud
max_altitud <- max(meta_maiz$Altitud, na.rm = TRUE)
cat("Altitud máxima:", max_altitud, "msnm\n")
min_altitud <- min(meta_maiz$Altitud, na.rm = TRUE)
cat("Altitud mínima:", min_altitud, "msnm\n")
cat("Altitud máxima:", max_altitud)
min_altitud <- min(meta_maiz$Altitud, na.rm = TRUE)
cat("Altitud mínima:", min_altitud)
#maxima y minima actitud
max_altitud <- max(meta_maiz$Altitud, na.rm = TRUE)
cat("Altitud máxima:", max_altitud)
min_altitud <- min(meta_maiz$Altitud, na.rm = TRUE)
cat("Altitud mínima:", min_altitud)
#dataframe solo con los datos de Olotillo
olotillo.df <- subset(meta_maiz, raza == "Olotillo")
#dataframe solo con los datos de Olotillo
olotillo.df <- subset(meta_maiz, Raza == "Olotillo")
View(olotillo.df)
View(olotillo.df)
olotillo.df <- subset(meta_maiz, Raza == "Reventador", "Jala", "Ancho")
razas <- c("Reventador", "Jala", "Ancho")
muestras_filtradas <- subset(meta_maiz, Raza %in% razas)
write.csv(muestras_filtradas, file = "meta/submat.csv", row.names = FALSE)
write.csv(muestras_filtradas, file = "Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Tarea_1.3/PracUni1Ses3/maices/meta/maizteocintle_SNP50k_meta_extended.txt", row.names = FALSE)
write.csv(muestras_filtradas, file = "Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Tarea_1.3/PracUni1Ses3/maices/meta/submat.csv", row.names = FALSE)
#Creacion de archivo csv, ojo que se debe cambiar la ruta absoluta a conveniencia
write.csv(muestras_filtradas, file = "Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Tarea_1.3/PracUni1Ses3/maices/meta/muestras_seleccionadas.csv", row.names = FALSE)
#Instalar paquetes
#install.packages("dplyr")
#install.packages("readr")
# Cargar paquetes
library(dplyr)
library(readr)
# Leer archivo FAM
fam <- read.table("../data/chilean_all48_hg19.fam", header = FALSE, stringsAsFactors = FALSE)
colnames(fam) <- c("FID", "IID", "PID", "MID", "Sex_fam", "Phenotype")
# Leer archivo de info poblacional
popinfo <- read_csv("../data/chilean_all48_hg19_popinfo.csv")
# Normalizar sexo en popinfo a formato numérico PLINK (1 = M, 2 = F)
popinfo_clean <- popinfo %>%
mutate(Sex_popinfo = case_when(
Sex %in% c("M", "Male", "MALE") ~ 1,
Sex %in% c("F", "Female", "FEMALE") ~ 2,
TRUE ~ 0  # desconocido o no especificado
))
# Unir ambos datasets
sex_compare <- fam %>%
inner_join(popinfo_clean, by = c("IID" = "SampleID"))
# Comparar
sex_compare <- sex_compare %>%
mutate(Discordant = ifelse(Sex_fam != Sex_popinfo, 1, 0))
# Calcular proporción
total <- nrow(sex_compare)
discordant <- sum(sex_compare$Discordant)
prop_discordant <- discordant / total
# Mostrar resultado
cat("Total de muestras comparadas:", total, "\n")
cat("Número de discordancias de sexo:", discordant, "\n")
cat("Proporción de discordancias:", round(prop_discordant, 4), "\n")
#Ejecutar el script desde la carpeta code
setwd("/home/ahumada_quintanilla/Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Unidad_2/Tarea_2.1/code")
#Instalar paquetes
#install.packages("dplyr")
#install.packages("readr")
# Cargar paquetes
library(dplyr)
library(readr)
# Leer archivo FAM
fam <- read.table("../data/chilean_all48_hg19.fam", header = FALSE, stringsAsFactors = FALSE)
colnames(fam) <- c("FID", "IID", "PID", "MID", "Sex_fam", "Phenotype")
# Leer archivo de info poblacional
popinfo <- read_csv("../data/chilean_all48_hg19_popinfo.csv")
# Leer archivo FAM
fam <- read.table("../data/ChileGenomico/chilean_all48_hg19.fam", header = FALSE, stringsAsFactors = FALSE)
colnames(fam) <- c("FID", "IID", "PID", "MID", "Sex_fam", "Phenotype")
# Leer archivo de info poblacional
popinfo <- read_csv("../data/ChileGenomico/chilean_all48_hg19_popinfo.csv")
# Normalizar sexo en popinfo a formato numérico PLINK (1 = M, 2 = F)
popinfo_clean <- popinfo %>%
mutate(Sex_popinfo = case_when(
Sex %in% c("M", "Male", "MALE") ~ 1,
Sex %in% c("F", "Female", "FEMALE") ~ 2,
TRUE ~ 0  # desconocido o no especificado
))
# Unir ambos datasets
sex_compare <- fam %>%
inner_join(popinfo_clean, by = c("IID" = "SampleID"))
# Comparar
sex_compare <- sex_compare %>%
mutate(Discordant = ifelse(Sex_fam != Sex_popinfo, 1, 0))
# Calcular proporción
total <- nrow(sex_compare)
discordant <- sum(sex_compare$Discordant)
prop_discordant <- discordant / total
# Unir ambos datasets
sex_compare <- fam %>%
inner_join(popinfo_clean, by = c("IID" = "SampleID"))
View(popinfo_clean)
View(popinfo_clean)
View(popinfo)
View(popinfo)
View(fam)
View(fam)
# Unir ambos datasets
sex_compare <- fam %>%
inner_join(popinfo_clean, by = c("IID" = "SampleID"))
View(fam)
View(fam)
View(popinfo)
View(popinfo_clean)
View(popinfo)
View(popinfo_clean)
View(popinfo)
View(popinfo_clean)
View(popinfo)
View(popinfo_clean)
View(popinfo)
View(popinfo_clean)
View(fam)
View(popinfo)
View(fam)
View(popinfo)
View(popinfo_clean)
# Unir ambos datasets
sex_compare <- fam %>%
inner_join(popinfo_clean, by = c("IID" = "IndID"))
# Comparar
sex_compare <- sex_compare %>%
mutate(Discordant = ifelse(Sex_fam != Sex_popinfo, 1, 0))
# Calcular proporción
total <- nrow(sex_compare)
discordant <- sum(sex_compare$Discordant)
prop_discordant <- discordant / total
# Mostrar resultado
cat("Total de muestras comparadas:", total, "\n")
cat("Número de discordancias de sexo:", discordant, "\n")
cat("Proporción de discordancias:", round(prop_discordant, 4), "\n")
# Crear vector con los índices que hacen match entre fam$IID y popinfo$SampleID
matched_indices <- match(fam$IID, popinfo$IndID)
# Extraer sexo desde popinfo usando los índices
sex_from_popinfo <- popinfo$Sex_numeric[matched_indices]
# Comparar los sexos
discordant <- fam$Sex_fam != sex_from_popinfo
# Calcular proporción
total <- nrow(sex_compare)
discordant <- sum(sex_compare$Discordant)
prop_discordant <- discordant / total
# Mostrar resultado
cat("Total de muestras comparadas:", total, "\n")
cat("Número de discordancias de sexo:", discordant, "\n")
cat("Proporción de discordancias:", round(prop_discordant, 4), "\n")
source("~/Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Unidad_2/Tarea_2.1/code/script_discordancias.R", echo = TRUE)
#Ejecutar el script desde la carpeta code
setwd("/home/ahumada_quintanilla/Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Unidad_2/Tarea_2.1/code")
# Leer archivo generado por PLINK
sexcheck <- read.table("../data/ChileGenomico/chilean_all48_hg19_check_sex.sexcheck", header = TRUE)
# Leer archivo generado por PLINK
sexcheck <- read.table("../results/chilean_all48_hg19_sex_check.sexcheck", header = TRUE)
# Filtrar los que tienen discordancia
discordant <- subset(sexcheck, STATUS == "PROBLEM")
# Seleccionar columnas clave para el reporte
report <- discordant[, c("FID", "IID", "PEDSEX", "SNPSEX", "F")]
# Renombrar columnas para claridad
colnames(report) <- c("FamilyID", "IndividualID", "Sex_FAM", "Sex_PLINK", "X_Fstat")
# Guardar como CSV para revisión
write.csv(report, "../result/sex_discordances_report.csv", row.names = FALSE)
# Guardar como CSV para revisión
write.csv(report, "../result/sex_discordances_report.csv", row.names = FALSE)
# Guardar como CSV para revisión
write.csv(report, "../results/", row.names = FALSE)
# Guardar como CSV para revisión
write.csv(report, "../results/sex_discordances_report.csv", row.names = FALSE)
# Mostrar resumen por consola
cat("Número de individuos con discordancia de sexo:", nrow(report), "\n\n")
print(report)
#Ejecutar el script desde la carpeta code
setwd("/home/ahumada_quintanilla/Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Unidad_2/Tarea_2.1/code")
# Cargar librerías necesarias
library(readr)
library(dplyr)
# Leer el archivo popinfo
popinfo <- read_csv("../data/chilean_all48_hg19_popinfo.csv")
# Leer el archivo popinfo
popinfo <- read_csv("../data/ChileGenomico/chilean_all48_hg19_popinfo.csv")
# Estandarizar valores de sexo si es necesario
popinfo <- popinfo %>%
mutate(Sex_clean = case_when(
Sex %in% c("M", "Male", "MALE") ~ "Male",
Sex %in% c("F", "Female", "FEMALE") ~ "Female",
TRUE ~ "Unknown"
))
# Crear tabla de contingencia: conteo por sexo y ancestría
contingency_table <- table(popinfo$Sex_clean, popinfo$Ancestry)
# Mostrar en consola
print(contingency_table)
# Opcional: guardar como CSV para revisar en Excel
write.csv(as.data.frame.matrix(contingency_table),
"data/contingency_table_sex_ancestry.csv")
# Opcional: guardar como CSV para revisar en Excel
write.csv(as.data.frame.matrix(contingency_table),
"../result/contingency_table_sex_ancestry.csv")
# Mostrar en consola
print(contingency_table)
# Cargar librerías
library(ggplot2)
install.packages("ggplot2")
#Ejecutar el script desde la carpeta code
setwd("/home/ahumada_quintanilla/Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Unidad_2/Tarea_2.1/code")
# Cargar librerías
library(ggplot2)
library(readr)
# Leer archivo de frecuencias generado por PLINK
freq <- read_table("../results/CLG_Chr4_0bp-2Mb_Frecuencias.frq", comment = "")
# Revisar que la columna MAF existe
if (!"MAF" %in% names(freq)) {
stop("El archivo no contiene una columna 'MAF'. ¿Seguro que usaste PLINK --freq?")
}
View(freq)
View(freq)
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter(`{ALLELE:FREQ}` > 0 & MAF <= 0.5)
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter(`{ALLELE:FREQ}` > 0 & `{ALLELE:FREQ}` <= 0.5)
# Graficar histograma
p <- ggplot(freq_clean, aes(x = MAF)) +
geom_histogram(binwidth = 0.01, fill = "#3E8EDE", color = "black") +
labs(title = "Espectro de Frecuencia Alélica Menor (MAF)",
x = "Frecuencia alélica menor (MAF)",
y = "Número de variantes") +
theme_minimal()
View(freq)
View(p)
View(p)
View(p)
View(p)
View(p)
# Guardar la figura como PNG
ggsave("../results/maf_histogram.png", plot = p, width = 8, height = 5, dpi = 300)
# Guardar la figura como PNG
ggsave("../results/maf_histogram.png", plot = p, width = 8, height = 5, dpi = 300)
# Guardar la figura como PNG
ggsave("../results/histogram.png", plot = p, width = 8, height = 5, dpi = 300)
# Graficar histograma
p <- ggplot(freq_clean, aes(x = `{ALLELE:FREQ}`)) +
geom_histogram(binwidth = 0.01, fill = "#3E8EDE", color = "black") +
labs(title = "Espectro de Frecuencia Alélica Menor (MAF)",
x = "Frecuencia alélica menor (MAF)",
y = "Número de variantes") +
theme_minimal()
# Guardar la figura como PNG
ggsave("../results/histogram.png", plot = p, width = 8, height = 5, dpi = 300)
# Graficar histograma
p <- ggplot(freq_clean, aes(x = `{ALLELE:FREQ}`)) +
geom_histogram(binwidth = 0.01, fill = "#3E8EDE", color = "black") +
labs(title = "Espectro de Frecuencia Alélica Menor (MAF)",
x = "Frecuencia alélica menor (MAF)",
y = "Número de variantes") +
theme_minimal()
# Guardar la figura como PNG
ggsave("../results/histogram.png", plot = p, width = 8, height = 5, dpi = 300)
View(p)
View(freq_clean)
View(freq_clean)
View(freq)
View(freq)
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter(`{ALLELE:FREQ}` > 0 & `{ALLELE:FREQ}` <= 0.5)
View(freq_clean)
View(freq_clean)
library(dplyr)
# Leer archivo de frecuencias generado por PLINK
freq <- read_table("../results/CLG_Chr4_0bp-2Mb_Frecuencias.frq", comment = "")
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter(`{ALLELE:FREQ}` > 0 & `{ALLELE:FREQ}` <= 0.5)
View(freq_clean)
View(freq_clean)
colnames(freq)
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter({ALLELE:FREQ} > 0 & {ALLELE:FREQ} <= 0.5)
names(freq)[names(freq) == `{ALLELE:FREQ}`] <- "MAF"
names(freq)[names(freq) == "`{ALLELE:FREQ}`"] <- "MAF"
colnames(freq)
names(freq)[names(freq) == "{ALLELE:FREQ}"] <- "MAF"
colnames(freq)
#Ejecutar el script desde la carpeta code
setwd("/home/ahumada_quintanilla/Escritorio/Bioinformatica/Tareas_BioinfRepro2025_AAQ/Unidad_2/Tarea_2.1/code")
# Cargar librerías
library(ggplot2)
library(readr)
library(dplyr)
# Leer archivo de frecuencias generado por PLINK
freq <- read_table("../results/CLG_Chr4_0bp-2Mb_Frecuencias.frq", comment = "")
colnames(freq)
names(freq)[names(freq) == "{ALLELE:FREQ}"] <- "MAF"
colnames(freq)
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter(MAF > 0 & MAF <= 0.5)
View(freq_clean)
View(freq_clean)
freq$MAF <- as.numeric(freq$MAF)
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter(MAF > 0 & MAF <= 0.5)
View(freq)
View(freq)
# Leer archivo de frecuencias generado por PLINK
freq <- read_table("../results/CLG_Chr4_0bp-2Mb_Frecuencias.frq", comment = "")
colnames(freq)
names(freq)[names(freq) == "{ALLELE:FREQ}"] <- "MAF"
colnames(freq)
freq$MAF <- as.numeric(freq$MAF)
View(freq)
View(freq)
# Leer archivo de frecuencias generado por PLINK
freq <- read_table("../results/CLG_Chr4_0bp-2Mb_Frecuencias.frq", comment = "")
View(freq)
View(freq)
colnames(freq)
colnames(freq)
names(freq)[names(freq) == "{ALLELE:FREQ}"] <- "MAF"
colnames(freq)
freq$MAF_numeric <- as.numeric(sub(".*:", "", freq$MAF))
View(freq)
View(freq)
# Filtrar valores válidos de MAF entre 0 y 0.5
freq_clean <- freq %>%
filter(MAF_numeric > 0 & MAF_numeric <= 0.5)
# Graficar histograma
p <- ggplot(freq_clean, aes(x = MAF)) +
geom_histogram(binwidth = 0.01, fill = "#3E8EDE", color = "black") +
labs(title = "Espectro de Frecuencia Alélica Menor (MAF)",
x = "Frecuencia alélica menor (MAF)",
y = "Número de variantes") +
theme_minimal()
# Guardar la figura como PNG
ggsave("../results/histogram.png", plot = p, width = 8, height = 5, dpi = 300)
# Graficar histograma
p <- ggplot(freq_clean, aes(x = MAF_numeric)) +
geom_histogram(binwidth = 0.01, fill = "#3E8EDE", color = "black") +
labs(title = "Espectro de Frecuencia Alélica Menor (MAF)",
x = "Frecuencia alélica menor (MAF)",
y = "Número de variantes") +
theme_minimal()
# Guardar la figura como PNG
ggsave("../results/histogram.png", plot = p, width = 8, height = 5, dpi = 300)
